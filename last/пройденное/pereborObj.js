// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Symbol.iterator: 1 varient

// let range = {
//   from: 1,
//   to: 5
// };

// // 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
// range[Symbol.iterator] = function() {

//   // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
//   // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
//   return {
//     current: this.from,
//     last: this.to,

//     // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
//     next() {
//       // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
//       if (this.current <= this.last) {
//         return { done: false, value: this.current++ };
//       } else {
//         return { done: true };
//       }
//     }
//   };
// };

// // —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!
// for (let num of range) {
//   alert(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
// }



// 2 varient

// let range = {
//   from: 1,
//   to: 5,

//   [Symbol.iterator]() {
//     this.current = this.from;
//     return this;
//   },

//   next() {
//     if (this.current <= this.to) {
//       return { done: false, value: this.current++ };
//     } else {
//       return { done: true };
//     }
//   }
// };

// for (let num of range) {
//   alert(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
// }

// —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç!

// for (let char of "test") {
//   // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 4 —Ä–∞–∑–∞: –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
//   alert( char ); // t, –∑–∞—Ç–µ–º e, –∑–∞—Ç–µ–º s, –∑–∞—Ç–µ–º t
// }

// let str = 'ùí≥üòÇ';
// for (let char of str) {
//     alert( char ); // ùí≥, –∞ –∑–∞—Ç–µ–º üòÇ
// }



// –ø—Ä–∏–º–µ—Ä —è–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞: –ø—Ä–∏–º–µ—Ä —Å–æ —Å—Ç—Ä–æ–∫–æ–π

// let str = "Hello";

// // –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏
// // for (let char of str) alert(char);

// let iterator = str[Symbol.iterator]();

// while (true) {
//   let result = iterator.next();
//   if (result.done) break;
//   alert(result.value); // –≤—ã–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
// }


// –ü—Ä–∏–º–µ—Ä –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–ª—å–∑—è –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, —Ç.–∫ –æ—Ç—Å—Ç—É—Ç—Å—Ç–≤—É–µ—Ç Symbol.iterator

// let arrayLike = { // –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length => –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤
//   0: "Hello",
//   1: "World",
//   length: 2
// };

// // –û—à–∏–±–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Symbol.iterator)
// for (let item of arrayLike) {}


// –ï—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Array.from, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ –∏ –¥–µ–ª–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ ¬´–Ω–∞—Å—Ç–æ—è—â–∏–π¬ª Array. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —É–∂–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤.

// let arrayLike = {
//   0: "Hello",
//   1: "World",
//   length: 2
// };

// let arr = Array.from(arrayLike); // (*)
// alert(arr.pop()); // World (–º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç)


// –¢–æ –∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º:
// // range –≤–∑—è—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ
// let arr = Array.from(range);
// alert(arr); // 1,2,3,4,5 (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ toString —Ä–∞–±–æ—Ç–∞–µ—Ç)

let range = {
	  from: 1,
	  to: 5,
	
	  [Symbol.iterator]() {
	    this.current = this.from;
	    return this;
	  },
	
	  next() {
	    if (this.current <= this.to) {
	      return { done: false, value: this.current++ };
	    } else {
	      return { done: true };
	    }
	  }
	};
	
	for (let num of range) {
	  alert(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
	}

	let arr = Array.from(range);
alert(arr); // 1,2,3,4,5 (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ toString —Ä–∞–±–æ—Ç–∞–µ—Ç)

let arr12 = Array.from(range, num => num * num);

alert(arr12); // 1,4,9,16,25


// –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Array.from, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤:

// let str = 'ùí≥üòÇ';

// // —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// let chars = Array.from(str);

// alert(chars[0]); // ùí≥
// alert(chars[1]); // üòÇ
// alert(chars.length); // 2
// alert(chars);


// let str = 'ùí≥üòÇ';

// let chars = []; // Array.from –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ç –∂–µ —Ü–∏–∫–ª
// for (let char of str) {
//   chars.push(char);
// }

// alert(chars);

// function slice(str, start, end) {
//   return Array.from(str).slice(start, end).join('');
// }

// let str = 'ùí≥üòÇ©∑∂';

// alert( slice(str, 1, 3) ); // üòÇ©∑∂

// // –∞ –≤–æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
// alert( str.slice(1, 3) ); // –º—É—Å–æ—Ä (–¥–≤–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã—Ö –ø–∞—Ä)