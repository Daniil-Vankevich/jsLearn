// остаточные операторы (rest) и операторы расширения (spread)
// ... rest остаточный оператор. Независимо от того, сколько передается аргументов, можно доставать их всех и с ними работать!
const func = (...rest) => {
	return rest.reduce((ac, item) => {
		return ac + item;
	}, 0);
};

console.log(func(1, 2, 3, 4, 5));

const funRest = (a, b, ...rest) => {
	return rest.reduce((ac, item) => {
		return ac + item;
	}, 0);
};

console.log(funRest(1, 2, 3, 4, 5));



// ______________________________________________________________

// оператор расширения!!!!!  Math.max(...args)

const args = [1, 23, 3, 4, 5];
const args2 = [6, 7, 8]

const funcRest = (...rest) => {
	return rest.reduce((ac, item) => {
		return ac + item;
	}, 0);
};

console.log(funcRest(...args, ...args2));

console.log(Math.max(...args));



// Когда мы видим "..." в коде, это могут быть как остаточные параметры, так и оператор расширения.
// Как отличить их друг от друга:

// Если ... располагается в конце списка параметров функции, то это «остаточные параметры». Он собирает остальные неуказанные аргументы и делает из них массив.
// Если ... встретился в вызове функции или где-либо ещё, то это «оператор расширения». Он извлекает элементы из массива.
// Полезно запомнить:

// Остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов.
// С помощью оператора расширения можно вставить массив в функцию, которая по умолчанию работает с обычным списком аргументов.
// Вместе эти конструкции помогают легко преобразовывать наборы значений в массивы и обратно.

// К аргументам функции можно обращаться и по-старому — через псевдомассив arguments.